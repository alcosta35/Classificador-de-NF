# ============================================================================
# SISTEMA DE VALIDA√á√ÉO CFOP - GOOGLE COLAB
# Script completo para executar no Google Colab
# ============================================================================

# ----------------------------------------------------------------------------
# C√âLULA 1: Setup Inicial - Criar Arquivos do Projeto
# ----------------------------------------------------------------------------
print("="*70)
print("üßæ SISTEMA DE VALIDA√á√ÉO CFOP - CONFIGURA√á√ÉO INICIAL")
print("="*70)
print("\nüì¶ Criando estrutura de arquivos do projeto...\n")

import os
from pathlib import Path

# Criar diret√≥rio do projeto
project_dir = Path("/content/validador-cfop")
project_dir.mkdir(exist_ok=True)
os.chdir(project_dir)

# Criar diret√≥rios necess√°rios
for dir_name in ["uploads", "temp_csvs", "static"]:
    (project_dir / dir_name).mkdir(exist_ok=True)

print("‚úÖ Estrutura de diret√≥rios criada!")
print(f"üìÅ Diret√≥rio do projeto: {project_dir}\n")

# Instru√ß√µes para pr√≥ximo passo
print("="*70)
print("üìã PR√ìXIMO PASSO:")
print("="*70)
print("""
Voc√™ precisa fazer upload dos seguintes arquivos para este diret√≥rio:
  1. main.py
  2. agente_cfop.py
  3. utils.py
  4. requirements.txt

Execute este c√≥digo para fazer upload:
""")

print("""
from google.colab import files
import shutil

print("üì§ Fa√ßa upload de: main.py")
uploaded = files.upload()
for filename in uploaded.keys():
    shutil.move(filename, '/content/validador-cfop/')

print("üì§ Fa√ßa upload de: agente_cfop.py")
uploaded = files.upload()
for filename in uploaded.keys():
    shutil.move(filename, '/content/validador-cfop/')

print("üì§ Fa√ßa upload de: utils.py")
uploaded = files.upload()
for filename in uploaded.keys():
    shutil.move(filename, '/content/validador-cfop/')

print("üì§ Fa√ßa upload de: requirements.txt")
uploaded = files.upload()
for filename in uploaded.keys():
    shutil.move(filename, '/content/validador-cfop/')

print("\\n‚úÖ Todos os arquivos foram enviados!")
""")

# ----------------------------------------------------------------------------
# C√âLULA 2: Instala√ß√£o de Depend√™ncias
# ----------------------------------------------------------------------------
print("\n" + "="*70)
print("üì¶ INSTALANDO DEPEND√äNCIAS")
print("="*70 + "\n")

# Instalar pacotes necess√°rios
get_ipython().system('pip install -q fastapi uvicorn[standard] python-multipart pyngrok python-dotenv')
get_ipython().system('pip install -q langchain langchain-openai openai')
get_ipython().system('pip install -q pandas numpy aiofiles')

print("\n‚úÖ Depend√™ncias instaladas com sucesso!")

# Verificar instala√ß√£o
print("\nüìã Verificando instala√ß√£o:")
get_ipython().system('pip list | grep -E "fastapi|langchain|openai|pyngrok|pandas"')

# ----------------------------------------------------------------------------
# C√âLULA 3: Configurar Secrets e Criar .env
# ----------------------------------------------------------------------------
print("\n" + "="*70)
print("üîë CONFIGURA√á√ÉO DE API KEYS")
print("="*70 + "\n")

print("""
‚ö†Ô∏è IMPORTANTE: Voc√™ precisa configurar 2 secrets no Google Colab:

1Ô∏è‚É£ OPENAI_API_KEY
   - Clique no √≠cone de chave (üîë) no painel lateral esquerdo
   - Clique em "+ Add new secret"
   - Nome: OPENAI_API_KEY
   - Valor: Sua chave OpenAI (come√ßa com sk-...)
   - Ative "Notebook access"
   - Obter em: https://platform.openai.com/api-keys

2Ô∏è‚É£ NGROK_AUTHTOKEN
   - Adicione outro secret
   - Nome: NGROK_AUTHTOKEN
   - Valor: Seu token ngrok
   - Ative "Notebook access"
   - Obter em: https://dashboard.ngrok.com/get-started/your-authtoken

Ap√≥s configurar os secrets, execute esta c√©lula:
""")

try:
    from google.colab import userdata
    
    # Tentar obter as chaves
    openai_key = userdata.get('OPENAI_API_KEY')
    ngrok_token = userdata.get('NGROK_AUTHTOKEN')
    
    # Criar arquivo .env
    os.chdir('/content/validador-cfop')
    with open('.env', 'w') as f:
        f.write(f"OPENAI_API_KEY={openai_key}\n")
    
    print("\n‚úÖ Secrets configurados com sucesso!")
    print("‚úÖ Arquivo .env criado!\n")
    
    # Verificar (sem mostrar a chave completa)
    print(f"OPENAI_API_KEY: {'*' * 20}{openai_key[-8:] if len(openai_key) > 8 else '***'}")
    print(f"NGROK_AUTHTOKEN: {'*' * 20}{ngrok_token[-8:] if len(ngrok_token) > 8 else '***'}")
    
except Exception as e:
    print(f"\n‚ùå Erro ao obter secrets: {e}")
    print("\nCertifique-se de ter configurado os secrets corretamente no Colab!")

# ----------------------------------------------------------------------------
# C√âLULA 4: Iniciar Servidor FastAPI + ngrok
# ----------------------------------------------------------------------------
print("\n" + "="*70)
print("üöÄ INICIANDO SISTEMA DE VALIDA√á√ÉO CFOP")
print("="*70 + "\n")

import subprocess
import sys
import time
from pyngrok import ngrok
from google.colab import userdata
import requests

# Limpar processos e cache antigos
print("üßπ Limpando processos antigos...")
get_ipython().system('killall ngrok 2>/dev/null || true')
get_ipython().system('fuser -k 8000/tcp 2>/dev/null || true')
get_ipython().system('rm -rf ~/.ngrok2')

# Configurar ngrok
try:
    ngrok_token = userdata.get('NGROK_AUTHTOKEN')
    ngrok.set_auth_token(ngrok_token)
    print("‚úÖ ngrok configurado!\n")
except Exception as e:
    print(f"‚ùå Erro ao configurar ngrok: {e}")
    print("Certifique-se de ter adicionado NGROK_AUTHTOKEN nos secrets!\n")

# Mudar para diret√≥rio do projeto
os.chdir('/content/validador-cfop')

print("üöÄ Iniciando servidor FastAPI...")

# Iniciar servidor FastAPI em background
processo = subprocess.Popen(
    [sys.executable, '-m', 'uvicorn', 'main:app', '--host', '0.0.0.0', '--port', '8000'],
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE
)

# Aguardar inicializa√ß√£o
print("‚è≥ Aguardando servidor inicializar (15 segundos)...")
time.sleep(15)

# Testar servidor local
print("üîç Testando servidor local...")
try:
    test_response = requests.get("http://localhost:8000/status", timeout=5)
    print("‚úÖ Servidor local est√° rodando!")
    print(f"   Status: {test_response.json()}\n")
except Exception as e:
    print(f"‚ùå Erro ao conectar com servidor local: {e}")
    print("   Verifique se os arquivos foram criados corretamente.\n")

# Criar t√∫nel ngrok
print("üåê Criando t√∫nel p√∫blico com ngrok...")
try:
    tunnel = ngrok.connect(8000)
    public_url = tunnel.public_url
    
    print("\n" + "="*70)
    print("‚úÖ SISTEMA DE VALIDA√á√ÉO CFOP EST√Å RODANDO!")
    print("="*70)
    print(f"\nüåê URL Principal:")
    print(f"   {public_url}")
    print(f"\nüìö Documenta√ß√£o API (Swagger):")
    print(f"   {public_url}/docs")
    print(f"\nüì§ P√°gina de Upload:")
    print(f"   {public_url}/upload")
    print(f"\nü§ñ P√°gina de An√°lise IA:")
    print(f"   {public_url}/analise")
    print("\n" + "="*70)
    
    # Teste de conectividade p√∫blica
    print("\nüîç Testando conex√£o p√∫blica...")
    try:
        response = requests.get(f"{public_url}/status", timeout=10)
        print(f"‚úÖ Conex√£o p√∫blica OK!")
        print(f"   {response.json()}\n")
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso: {e}\n")
    
    print("="*70)
    print("üìã COMO USAR:")
    print("="*70)
    print("""
1. Acesse a URL principal no seu navegador
2. Clique em "Upload de Arquivos"
3. Envie um ZIP contendo os 3 CSVs:
   - 202401_NFs_Cabecalho.csv
   - 202401_NFs_Itens.csv
   - CFOP.csv
4. Ap√≥s o upload, v√° para "An√°lise Inteligente"
5. Fa√ßa perguntas ao agente IA!

Exemplos de perguntas:
- Validar CFOP de todas as notas fiscais
- Mostrar apenas as notas com CFOP incorreto
- Analisar a nota fiscal n√∫mero 3510129
- Gerar relat√≥rio completo de valida√ß√£o
    """)
    
    print("="*70)
    print("‚ö†Ô∏è IMPORTANTE:")
    print("="*70)
    print("""
- Mantenha esta c√©lula RODANDO enquanto usar o sistema
- A URL do ngrok muda a cada execu√ß√£o
- Para parar: Runtime ‚Üí Interrupt execution
- Sess√£o Colab expira ap√≥s inatividade prolongada
    """)
    
    print("="*70)
    print("üîÑ Sistema em execu√ß√£o... Aguardando requisi√ß√µes...")
    print("="*70 + "\n")
    
    # Manter o script rodando
    try:
        while True:
            time.sleep(60)
            # Verificar se servidor ainda est√° rodando
            if processo.poll() is not None:
                print("\n‚ö†Ô∏è Servidor parou inesperadamente!")
                break
    except KeyboardInterrupt:
        print("\nüõë Sistema parado pelo usu√°rio!")
        processo.terminate()
        ngrok.disconnect(public_url)
        print("‚úÖ Encerrado com sucesso!")
        
except Exception as e:
    print(f"\n‚ùå ERRO ao criar t√∫nel ngrok: {e}")
    print("\nPoss√≠veis solu√ß√µes:")
    print("1. Verifique se NGROK_AUTHTOKEN est√° correto nos secrets")
    print("2. Acesse https://dashboard.ngrok.com/ para obter um novo token")
    print("3. Tente executar esta c√©lula novamente")
    if processo:
        processo.terminate()

# ----------------------------------------------------------------------------
# C√âLULA 5: Verificar Status e Logs
# ----------------------------------------------------------------------------
print("\n" + "="*70)
print("üìä STATUS DO SISTEMA")
print("="*70 + "\n")

# Verificar processos
print("üîç Processos em execu√ß√£o:")
get_ipython().system('ps aux | grep -E "uvicorn|ngrok" | grep -v grep')

print("\nüìÅ Arquivos no diret√≥rio:")
get_ipython().system('ls -lah /content/validador-cfop/')

print("\nüåê T√∫neis ngrok ativos:")
try:
    from pyngrok import ngrok
    tunnels = ngrok.get_tunnels()
    if tunnels:
        for tunnel in tunnels:
            print(f"   {tunnel.public_url} ‚Üí {tunnel.config['addr']}")
    else:
        print("   Nenhum t√∫nel ativo")
except Exception as e:
    print(f"   Erro ao verificar t√∫neis: {e}")

print("\n‚úÖ Setup completo! Sistema pronto para uso.\n")